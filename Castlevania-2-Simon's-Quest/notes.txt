Town of Jova - AC 90
Jova Woods 1 - E4 9F
Jova Veros Bridge - 09 A0
Veros Woods 1 - 32 A0
Veros Woods 2 (drop) - 4F A0
Town of Veros - 1A 92

Dracula Bridge - A9 A8
Dracula - FE B3

pause 2 frames before jump whip peak holds peak for 4 frames instead of 2


0x3BA = 0x36 enemy explosion, 0x37 for heart
0x3B4 is base location

01:82CE:29 0F     AND #$0F
01:82D0:09 80     ORA #$80


death HP - 0x027fb5a0



Slight progress on figuring out blob jump if anyone wants to know, $0470 is where the delay value between blob jumps is stored. Still looking for what controls height of the jump
at least when it's the only enemy on screen..
Canight03/12/2019
Actually, I'm wrong it's just indexed from $0468, happened to be $0470 this time
But the value is generated from $002E, like Burb said above. Seems to be the "RNG" byte along with $002D
Canight03/12/2019
Yeah okay, I don't think it's possible to manipulate the blob jumps unfortunately.  Every frame,  there's a byte increased by 1 @ $001D, then also every frame the value stored at $001D is added to $002E, then every time the blob lands it grabs whatever value is in $002E, does AND #$1F; ADC #$03 which calculates the jump delay, then after the delay is over it grabs $002E again, does AND #$3F; ADC #$10 which calculates the jump height. This happens at 01:B131 for the delay and 01:B175 for the jump height if you wanna take a look
We can't really rely on a frame counter for manipulation sinces it's running all the way from power on

@BloodSweatAndCode I'm pretty sure X position of simon doesn't have anything to do with the blob jumps, only the direction. $2E does change when paused but I'm not sure on screen transitions, that's something to look into for sure. And the jump height is calculated after the delay is over, so $2E will have changed at that point. We also can't really know how much it will have changed by even if we knew $2E at the time of calculating the delay because it depends on what $1D was at that time. Also a couple more tidbits and memory locations: ($0444,X) is the jump state (0 = calculating, 1 = waiting in delay, 2 = jumping), ($0468,X) is the jump delay, and ($0456,X) is the jump height although not directly. The lower the value in $2E (and subsequently $0456,X) the higher the jump will be. It's also very disproportionate, only values of $2E lower than about #$0A will produce a jump high enough for blob boost. Small jumps are much more likely. Also, $0097 is used to track the gravity value of each sprite, so the game uses a counter at $036C,X  to see when to start applying gravity.


 07:C026:91 00     STA ($00),Y @ $8B00 = #$5E
 07:C028:C8        INY
 07:C029:D0 FB     BNE $C026
 07:C02B:E6 01     INC $0001 = #$8B
 07:C02D:E4 01     CPX $0001 = #$8B
 07:C02F:D0 F5     BNE $C026
 07:C031:A9 1E     LDA #$1E
 07:C033:8D 00 01  STA $0100 = #$1E
 07:C036:20 E7 C0  JSR $C0E7
 07:C039:20 A8 C0  JSR $C0A8
 07:C03C:A5 2E     LDA $002E = #$DA
 07:C03E:18        CLC
 07:C03F:65 1D     ADC $001D = #$6B
 07:C041:85 2E     STA $002E = #$DA
>07:C043:4C 3C C0  JMP $C03C
 07:C046:48        PHA
 07:C047:8A        TXA
 07:C048:48        PHA
 07:C049:98        TYA

 Crit hit is 185 damage on last frame of weapon's existence thanks to bad weapon index of 0x80 that pushes damage value out of range before damage is applied on last frame

## floor drops

14 frames after a floor drop whip:

```
 03:8298:AD 36 03  LDA y_subpixel = #$F0
 03:829B:18        CLC
 03:829C:6D 7E 03  ADC $037E = #$D8
 03:829F:8D 36 03  STA y_subpixel = #$F0
>03:82A2:AD 24 03  LDA simon_y_pos = #$81
 03:82A5:65 93     ADC $0093 = #$00
 03:82A7:8D 24 03  STA simon_y_pos = #$81
```

setting sprite frame prior to floor drop sprite

```
07:DD6E:A9 00     LDA #$00
 07:DD70:9D FC 03  STA $03FC,X @ $03FC = #$00
 07:DD73:C8        INY
 07:DD74:B1 08     LDA ($08),Y @ $DDA6 = #$05
 07:DD76:18        CLC
 07:DD77:7D FC 03  ADC $03FC,X @ $03FC = #$00
>07:DD7A:9D 00 03  STA $0300,X @ $0300 = #$0A
 07:DD7D:C8        INY
 07:DD7E:B1 08     LDA ($08),Y @ $DDA6 = #$05
 07:DD80:9D EA 03  STA $03EA,X @ $03EA = #$00
 07:DD83:FE FC 03  INC $03FC,X @ $03FC = #$00
```

 03:8668:20 62 D3  JSR y delta set


this is not equal when y delta stays the same

  03:8636:AD 6C 03  LDA simon_y_delta = #$03
 03:8639:30 43     BMI $867E
 03:863B:20 FF 86  JSR $86FF
 03:863E:A0 10     LDY #$10
 03:8640:20 ED 86  JSR $86ED
 03:8643:C9 01     CMP #$01
 03:8645:F0 0E     BEQ $8655
 03:8647:C9 02     CMP #$02
 03:8649:F0 0A     BEQ $8655
 03:864B:A5 04     LDA $0004 = #$00
 03:864D:C9 01     CMP #$01
 03:864F:F0 04     BEQ $8655
 03:8651:C9 02     CMP #$02
 03:8653:D0 29     BNE $867E

### memory values

0x0008 = register that updates 0x037E (always 0x38)
0x004B = ???
0x0056 = ???
0x005E = ??????
0x0068 = ???
0x0093 = ??? gravity
0x00F5 = ???
0x0324 = y position relative to top of screen (0x00 at top, 0xFF at bottom)
0x0336 = y subpixel value (the important one)
0x036C = y delta (????)
0x037E = register that updates 0x0336
0x03D8 = simon's action
0x03FC = 
0x0390 = related to 0x03D8

### typical good values of 0x0336 for floor drops

* 0x00
* 0x08
* 0x10

### 0x00 subpixel 1-frame floor drop setup

When you have a 0x00 value for your subpixel (0x0336) you can setup a floor drop when jumping up 2 blocks. To do this, you must whip jump, pressing whip on EXACTLY the 2nd frame after the jump. This is a rhythm setup and requires some practice as it is frame perfect. The ideal spot for this is the very first drop in the game just before the lizardman grind. Also, if you're crazy like Burb, the blue crystal drop is another place this works well as you can save a few seconds not doing the jump up, jump down, jump up setup. That said, if you miss it, you're in big trouble because you won't know your subpixel and you'll just have to hope you get lucky on repeated floor drop attempts.


